declare function backtrace(context?: CpuContext): DebugSymbol[] | null;
declare function enumerateExports(module: any): ModuleExportDetails[];
declare function enumerateImports(module);
declare function enumerateJavaClasses(useCache?);
declare function enumerateJavaMethods(className: string): void;
declare function enumerateModules();
declare function enumerateModuleInfo(module);
declare function enumerateRanges(): RangeDetails[];
declare function enumerateSymbols(module);
declare function evaluate(w);
declare function evaluateFunction(w);
declare function evaluatePtr(w: any): NativePointer;
declare function findExport(name, module?): NativePointer | null;
declare function findModule(module: any): Module | Module[] | null;
declare function findSymbol(pattern);
declare function getAddressTs(p);
declare function getDebugSymbols(ptrs): DebugSymbol[];
declare function getInstruction(address);
declare function getRange(pt): RangeDetails | null;
declare function getSymbolByAddress(pt): DebugSymbol | null;
declare function hookAllJavaMethods(className: string, callback: Function): boolean;
declare function hookClassLoaderClassInitialization(className: string, callback: Function): boolean;
declare function hookJavaConstructor(className: string, callback: Function): boolean;
declare function hookJavaMethod(targetClassMethod: string, callback: Function): boolean;
declare function hookModuleInitialization(moduleName: string, callback: Function): boolean;
declare function injectBlob(name: string, blob: string);
declare function isAddressWatched(pt: any): boolean;
declare function javaBacktrace();
declare function jvmExplorer(handle);
declare function log(what): void;
declare function putBreakpoint(address_or_class: any, condition?: string | Function): boolean;
declare function putJavaClassInitializationBreakpoint(className: string): boolean;
declare function putModuleInitializationBreakpoint(moduleName: string): boolean;
declare function putWatchpoint(address: any, flags: string, callback?: Function);
declare function readString(address, length?);
declare function readBytes(address, length);
declare function readPointer(pt);
declare function releaseFromJs(tid): void;
declare function removeBreakpoint(address_or_class: any): boolean;
declare function removeJavaClassInitializationBreakpoint(moduleName: string): boolean;
declare function removeModuleInitializationBreakpoint(moduleName: string): boolean;
declare function removeWatchpoint(address: any): boolean;
declare function restart(): boolean;
declare function setData(key, data);
declare function startJavaTracer(classes: string[], callback: Function);
declare function startNativeTracer(callback);
declare function stopJavaTracer(): boolean;
declare function writeBytes(address: any, what: string | ArrayBuffer);